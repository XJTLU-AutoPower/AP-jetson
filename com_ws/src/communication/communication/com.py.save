import rclpy
from rclpy.node import Node
from ackermann_msgs.msg import AckermannDriveStamped
import can
import math

class DriveToCanNode(Node):
    def __init__(self):
        super().__init__('drive_to_can')
        self.subscription = self.create_subscription(
            AckermannDriveStamped,
            '/drive',
            self.callback,
            10
        )
        self.get_logger().info("can is open")
        self.can_interface = 'can0'  # CAN 接口名称
        self.can_bus = can.Bus(interface='socketcan', channel=self.can_interface)


    def callback(self, msg):
        # 将 ROS 2 消息转换为 CAN 消息
        steering_angle = msg.drive.steering_angle  # 转换角度
        steering_angle = math.degrees(steering_angle)
        steering_angle = int(steering_angle * (500/45) + 1500)
        self.get_logger().info(steering_angle)
        angle_front, angle_end = self.transfer(steering_angle)
        speed = int(1499 + ((msg.drive.speed * 8) if msg.drive.speed >= 0 else (msg.drive.speed * 5)))
        speed_front, speed_end = self.transfer(speed)# 转换速度

	# Candlelight firmware on Linux
        bus = can.interface.Bus(interface='socketcan', channel='can0', bitrate=1000000)

	# Stock slcan firmware on Linux
		# bus = can.interface.Bus(interface='slcan', channel='/dev/ttyACM0', bitrate=1000000)

		msg = can.Message(arbitration_id=0x112, data=[speed_front, speed_end, speed_front, speed_end, 0, 0, 0, 0],
		                  is_extended_id=False)
        except can.CanError:
                self.get_logger().info("Message NOT sent")



    def transfer(self, value):
        b = hex(value)
        end_part = b[len(b) - 2:len(b)]
        front_part = b[:len(b) - 2]
        front_part = front_part.replace('0x', '')
        end_part = int(end_part, 16)
        front_part = int(front_part, 16)

        return front_part, end_part


def main(args=None):
    rclpy.init(args=args)
    node = DriveToCanNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
